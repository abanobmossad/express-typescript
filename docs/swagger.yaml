openapi: 3.0.0
info:
  title: Express Typescript
  version: 1.0.0
  description: API documentation for the endpoints
  contact:
    name: Abanob Mosaad
    url: 'https://github.com/abanobmossad'
    email: abanobmossad@gmail.com
  license:
    name: ISC
    url: 'https://opensource.org/licenses/ISC'
servers:
  - url: 'http://localhost:7000'
    description: Local server
paths:
  /login:
    post:
      summary: Login with basic strategy
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  expiresIn:
                    type: integer
                    description: Expiration period
                  token:
                    type: string
                    description: JWT
                required:
                  - expiresIn
                  - token
              examples:
                Response:
                  value:
                    expiresIn: 3600
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MjQ1YzVkNmMyNTllYmNlNDE2NmM5M2MiLCJpYXQiOjE2NDg4MzIwNzQsImV4cCI6MTY0ODgzNTY3NH0.6cm_79XMra7Dtn48N0FVhF__UE88CiDR3SkPKNqHCo8
      operationId: post-login
      description: |-
        Login to the server with `username` and `password`
        > The access token is saved to the `Cookies` automatically
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User username
                password:
                  type: string
                  description: User password
              required:
                - username
                - password
  /logout:
    post:
      summary: Logout
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                Response:
                  value:
                    message: logged-out
      operationId: post-logout
      description: Remove the Authorization header
      security:
        - Access Token: []
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: User ID
                    username:
                      type: string
                      description: User name
                    deposit:
                      type: string
                      description: Deposit
                    role:
                      type: string
                      description: Role
                      enum:
                        - seller
                        - buyer
                      default: buyer
              examples:
                Users:
                  value:
                    - _id: 6245c5b8c259ebce4166c939
                      username: seller_1
                      deposit: 105
                      role: seller
                      __v: 0
                    - _id: 6245c5d6c259ebce4166c93c
                      username: buyer_1
                      deposit: 0
                      role: buyer
                      __v: 0
      operationId: get-users
      description: Get all users in the system
      security:
        - Access Token: []
    post:
      summary: Create new user
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  deposit:
                    type: integer
                  role:
                    type: string
                    enum:
                      - seller
                      - buyer
                    default: buyer
              examples:
                Response:
                  value:
                    username: sellerj_1
                    deposit: 0
                    role: seller
                    _id: 624730640aa2f5b02a407169
                    __v: 0
      operationId: post-users
      description: Register new user to the system
      security:
        - Access Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User name (`unique`)
                password:
                  type: string
                  description: User password
                role:
                  type: string
                  enum:
                    - seller
                    - buyer
              required:
                - username
                - password
            examples:
              New Seller User:
                value:
                  username: seller_1
                  password: '123456'
                  role: seller
              New Buyer User:
                value:
                  username: seller_1
                  password: '123456'
                  role: seller
        description: ''
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: User ID
    get:
      summary: Get user by ID or username
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                User: {}
        '404':
          description: Not Found
      operationId: get-users-userId
      description: You can get user by `ID` or `username` using this endpoint
      security:
        - Access Token: []
    put:
      summary: Update user by ID
      tags:
        - Users
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
        '500':
          description: ''
      operationId: put-users-userId
      description: Update user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            examples:
              Update username:
                value:
                  username: seller_1
    delete:
      summary: Delete user by ID
      tags:
        - Users
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: delete-users-userId
      description: Remove user by Id
      security:
        - Access Token: []
  /products:
    get:
      summary: Get All products
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                Products:
                  value:
                    - _id: 62470390885f7a84d74b6867
                      productName: Pepsi
                      amountAvailable: 1
                      cost: 200
                      sellerId: 6245c5b8c259ebce4166c939
                      __v: 0
      operationId: get-products
      description: Get all products in the system
    post:
      summary: Create new product
      tags:
        - Products
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                Created Product:
                  value:
                    productName: Pepsi
                    amountAvailable: 2
                    cost: 5
                    sellerId: 6245c5b8c259ebce4166c939
                    _id: 6247327d0aa2f5b02a407171
                    __v: 0
      operationId: post-products
      description: |-
        Create New Product
        > Only sellers can make this action
      security:
        - Access Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              New Product:
                value:
                  productName: Pepsi
                  amountAvailable: 2
                  cost: 5
  '/products/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
        description: Product ID
    get:
      summary: Get product by ID
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                Product:
                  value:
                    productName: Pepsi
                    amountAvailable: 2
                    cost: 5
                    sellerId: 6245c5b8c259ebce4166c939
                    _id: 6247327d0aa2f5b02a407171
                    __v: 0
      operationId: get-products-productId
      description: Get single product by ID
    put:
      summary: Update product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                Updated Product:
                  value:
                    productName: Pepsi
                    amountAvailable: 2
                    cost: 5
                    sellerId: 6245c5b8c259ebce4166c939
                    _id: 6247327d0aa2f5b02a407171
                    __v: 0
      operationId: put-products-productId
      description: |-
        Update Product by ID
        > Only the seller can make this action
      security:
        - Access Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              Update amount:
                value:
                  amountAvailable: 20
    delete:
      summary: Delete product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: delete-products-productId
      description: |-
        Remove product by ID
        > Only the seller can make this action
      security:
        - Access Token: []
  /v/deposit:
    post:
      summary: Deposit to user account
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coins:
                    type: string
                    description: The coins input
                  deposit:
                    type: string
                    description: The current deposit
              examples:
                Response:
                  value:
                    coins: 100
                    deposit: 100
        '500':
          description: Internal Server Error
      operationId: post-v-deposit
      description: |
        deposit endpoint so users with a “buyer” role can deposit 5, 10,
        20, 50 and 100 cent coins into their vending machine account
      security:
        - Access Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins:
                  type: integer
                  enum:
                    - 5
                    - 10
                    - 20
                    - 50
                    - 100
              required:
                - coins
        description: '> Only buyers can make this action'
  /v/buy:
    post:
      summary: Buy products
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalSpend:
                    type: number
                    description: Total spend amount
                  change:
                    type: number
                    description: Change returned
              examples:
                Response:
                  value:
                    totalSpend: 200
                    change: 200
        '406':
          description: 'Not Acceptable, If The user not have any deposit or not enough'
        '500':
          description: Internal Server Error
      operationId: post-v-buy
      description: buy products with the money they’ve deposited
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Wanted product ID
                amount:
                  type: string
                  description: The amount of products
              required:
                - productId
                - amount
      security:
        - Access Token: []
components:
  schemas:
    Product:
      title: Product
      type: object
      x-tags:
        - Products
      properties:
        _id:
          type: string
          description: Product ID
        productName:
          type: string
          description: Product Name
        amountAvailable:
          type: string
          description: Available amount
        cost:
          type: string
          description: Product Price
        sellerId:
          type: string
          description: Seller ID
      description: Product model
  securitySchemes:
    Access Token:
      type: http
      scheme: bearer
